//import org.apache.tools.ant.taskdefs.condition.Os
//import org.gradle.api.GradleException

plugins {
	// Apply the java plugin to add support for Java
	id 'java'

//	// Apply the application plugin to add support for building an independent distribution
//	id 'application'
}

description = 'World Server 3D'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.0.0'

repositories {
	flatDir {
		dirs 'src/main/resources', 'src/main/resources/libs'
	}
	
	// Use jcenter for resolving dependencies.
	// You can declare any Maven/Ivy/file repository here.
	//	jcenter()
	mavenLocal()
	mavenCentral()
	maven{
		url "https://mvnrepository.com/artifact/org.lwjgl.lwjgl/lwjgl"
	}
}


def lwjgl = [group:'org.lwjgl.lwjgl', version:'2.9.0']
dependencies {
	//jme 2
	implementation		name: 'jme2'
	
	// json
	implementation		group: 'org.json', name: 'json', version:'20180813'
//	implementation		name: 'json'
	
	//lwjgl
	implementation		group: "${lwjgl.group}", name: 'lwjgl', version: "${lwjgl.version}"
	
//	//images -- automatically added.
//	runtimeOnly		fileTree(dir: "src/main/resources/images", includes: ['*'])
	
	//dynamic libs -- automatically added.
//	runtimeOnly		fileTree(dir: project.nativeLibsDirPath, includes: ['*'])
//	runtimeOnly		fileTree(dir: project.osNativeLibsSrc, includes: ['*'])
	
	// Use JUnit test framework
	testImplementation	group: 'junit', name: 'junit', version: '4.12'
}

//create a single Jar with all dependencies
jar {
	manifest {
		attributes (
			"Main-Class" : "main.Main",
	//		"Implementation-Title": "Gradle",
			"Implementation-Version" : version
//			"Class-Path" : "/libs/jme2.jar"
		)
	}
	baseName = project.name + '-all'
	from configurations.runtimeClasspath.collect {
		zipTree it		//creates a directory file tree for all dependencies listed as a <runtimeOnly> or <compile> entry.
	}
}


//application {
//	// Define the main class for the application
//	mainClassName = 'main.Main'
//}

//run {
//	mainClassName = 'main.Main'
//	systemProperty 'java.library.path', "libs/native/${getOS()}"
//}

//def getOS() {
//	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//		return 'windows'
//	}
//	else if (Os.isFamily(Os.FAMILY_MAC)) {
//		return 'mac'
//	}
//	else if (Os.isFamily(Os.FAMILY_UNIX))
//		return 'linux' //this is not really all that correct
//	else
//		throw new GradleException('Your OS does not seem to be supported')
//}
//
//task checkOs  {
//	doLast
//	{
//		println "The current operating system : ${ getOS() }"
//	}
//}

//project.ext {
//	set('nativeLibsDirPath', "src/main/resources/libs/native")
//	set('osNativeLibsSrc', "src/main/resources/libs/native/${getOS()}")
//	set('osNativeLibsDst', "src/main/resources/${getOS()}")
//}
//
//// This task exposes just the current OS's libs necessary to run the JAR file.
//task copyDynamicLibs (type: Copy) {
//	from project.osNativeLibsSrc
//	into project.osNativeLibsDst
//}
//processResources.dependsOn copyDynamicLibs